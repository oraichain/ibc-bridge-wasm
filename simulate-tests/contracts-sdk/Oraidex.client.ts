/**
* This file was automatically generated by @oraichain/ts-codegen@0.35.9.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @oraichain/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import {Uint128, Binary, Addr, Cw20ReceiveMsg, Asset, Coin, Cw20Coin, Route} from "./types";
import {InstantiateMsg, ExecuteMsg, SwapOperation, QueryMsg, Decimal, SimulateSmartSwapExactAssetInResponse, SimulateSwapExactAssetInResponse, SimulateSwapExactAssetOutResponse} from "./Oraidex.types";
export interface OraidexReadOnlyInterface {
  contractAddress: string;
  simulateSwapExactAssetOut: ({
    assetOut,
    swapOperations
  }: {
    assetOut: Asset;
    swapOperations: SwapOperation[];
  }) => Promise<Asset>;
  simulateSwapExactAssetIn: ({
    assetIn,
    swapOperations
  }: {
    assetIn: Asset;
    swapOperations: SwapOperation[];
  }) => Promise<Asset>;
  simulateSwapExactAssetOutWithMetadata: ({
    assetOut,
    includeSpotPrice,
    swapOperations
  }: {
    assetOut: Asset;
    includeSpotPrice: boolean;
    swapOperations: SwapOperation[];
  }) => Promise<SimulateSwapExactAssetOutResponse>;
  simulateSwapExactAssetInWithMetadata: ({
    assetIn,
    includeSpotPrice,
    swapOperations
  }: {
    assetIn: Asset;
    includeSpotPrice: boolean;
    swapOperations: SwapOperation[];
  }) => Promise<SimulateSwapExactAssetInResponse>;
  simulateSmartSwapExactAssetIn: ({
    assetIn,
    routes
  }: {
    assetIn: Asset;
    routes: Route[];
  }) => Promise<Asset>;
  simulateSmartSwapExactAssetInWithMetadata: ({
    assetIn,
    includeSpotPrice,
    routes
  }: {
    assetIn: Asset;
    includeSpotPrice: boolean;
    routes: Route[];
  }) => Promise<SimulateSmartSwapExactAssetInResponse>;
}
export class OraidexQueryClient implements OraidexReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.simulateSwapExactAssetOut = this.simulateSwapExactAssetOut.bind(this);
    this.simulateSwapExactAssetIn = this.simulateSwapExactAssetIn.bind(this);
    this.simulateSwapExactAssetOutWithMetadata = this.simulateSwapExactAssetOutWithMetadata.bind(this);
    this.simulateSwapExactAssetInWithMetadata = this.simulateSwapExactAssetInWithMetadata.bind(this);
    this.simulateSmartSwapExactAssetIn = this.simulateSmartSwapExactAssetIn.bind(this);
    this.simulateSmartSwapExactAssetInWithMetadata = this.simulateSmartSwapExactAssetInWithMetadata.bind(this);
  }

  simulateSwapExactAssetOut = async ({
    assetOut,
    swapOperations
  }: {
    assetOut: Asset;
    swapOperations: SwapOperation[];
  }): Promise<Asset> => {
    return this.client.queryContractSmart(this.contractAddress, {
      simulate_swap_exact_asset_out: {
        asset_out: assetOut,
        swap_operations: swapOperations
      }
    });
  };
  simulateSwapExactAssetIn = async ({
    assetIn,
    swapOperations
  }: {
    assetIn: Asset;
    swapOperations: SwapOperation[];
  }): Promise<Asset> => {
    return this.client.queryContractSmart(this.contractAddress, {
      simulate_swap_exact_asset_in: {
        asset_in: assetIn,
        swap_operations: swapOperations
      }
    });
  };
  simulateSwapExactAssetOutWithMetadata = async ({
    assetOut,
    includeSpotPrice,
    swapOperations
  }: {
    assetOut: Asset;
    includeSpotPrice: boolean;
    swapOperations: SwapOperation[];
  }): Promise<SimulateSwapExactAssetOutResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      simulate_swap_exact_asset_out_with_metadata: {
        asset_out: assetOut,
        include_spot_price: includeSpotPrice,
        swap_operations: swapOperations
      }
    });
  };
  simulateSwapExactAssetInWithMetadata = async ({
    assetIn,
    includeSpotPrice,
    swapOperations
  }: {
    assetIn: Asset;
    includeSpotPrice: boolean;
    swapOperations: SwapOperation[];
  }): Promise<SimulateSwapExactAssetInResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      simulate_swap_exact_asset_in_with_metadata: {
        asset_in: assetIn,
        include_spot_price: includeSpotPrice,
        swap_operations: swapOperations
      }
    });
  };
  simulateSmartSwapExactAssetIn = async ({
    assetIn,
    routes
  }: {
    assetIn: Asset;
    routes: Route[];
  }): Promise<Asset> => {
    return this.client.queryContractSmart(this.contractAddress, {
      simulate_smart_swap_exact_asset_in: {
        asset_in: assetIn,
        routes
      }
    });
  };
  simulateSmartSwapExactAssetInWithMetadata = async ({
    assetIn,
    includeSpotPrice,
    routes
  }: {
    assetIn: Asset;
    includeSpotPrice: boolean;
    routes: Route[];
  }): Promise<SimulateSmartSwapExactAssetInResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      simulate_smart_swap_exact_asset_in_with_metadata: {
        asset_in: assetIn,
        include_spot_price: includeSpotPrice,
        routes
      }
    });
  };
}
export interface OraidexInterface extends OraidexReadOnlyInterface {
  contractAddress: string;
  sender: string;
  receive: ({
    amount,
    msg,
    sender
  }: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  swap: ({
    operations
  }: {
    operations: SwapOperation[];
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  transferFundsBack: ({
    returnDenom,
    swapper
  }: {
    returnDenom: string;
    swapper: Addr;
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  astroportPoolSwap: ({
    operation
  }: {
    operation: SwapOperation;
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  whiteWhalePoolSwap: ({
    operation
  }: {
    operation: SwapOperation;
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class OraidexClient extends OraidexQueryClient implements OraidexInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.receive = this.receive.bind(this);
    this.swap = this.swap.bind(this);
    this.transferFundsBack = this.transferFundsBack.bind(this);
    this.astroportPoolSwap = this.astroportPoolSwap.bind(this);
    this.whiteWhalePoolSwap = this.whiteWhalePoolSwap.bind(this);
  }

  receive = async ({
    amount,
    msg,
    sender
  }: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      receive: {
        amount,
        msg,
        sender
      }
    }, _fee, _memo, _funds);
  };
  swap = async ({
    operations
  }: {
    operations: SwapOperation[];
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      swap: {
        operations
      }
    }, _fee, _memo, _funds);
  };
  transferFundsBack = async ({
    returnDenom,
    swapper
  }: {
    returnDenom: string;
    swapper: Addr;
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      transfer_funds_back: {
        return_denom: returnDenom,
        swapper
      }
    }, _fee, _memo, _funds);
  };
  astroportPoolSwap = async ({
    operation
  }: {
    operation: SwapOperation;
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      astroport_pool_swap: {
        operation
      }
    }, _fee, _memo, _funds);
  };
  whiteWhalePoolSwap = async ({
    operation
  }: {
    operation: SwapOperation;
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      white_whale_pool_swap: {
        operation
      }
    }, _fee, _memo, _funds);
  };
}