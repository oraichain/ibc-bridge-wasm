/**
* This file was automatically generated by @oraichain/ts-codegen@0.35.9.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @oraichain/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import {Addr, Uint128, Binary, AssetInfo, Cw20ReceiveMsg} from "./types";
import {InstantiateMsg, ExecuteMsg, SwapOperation, Percentage, PoolKey, FeeTier, QueryMsg, MigrateMsg, ConfigResponse, SimulateSwapOperationsResponse} from "./OraiswapMixedRouter.types";
export interface OraiswapMixedRouterReadOnlyInterface {
  contractAddress: string;
  config: () => Promise<ConfigResponse>;
  simulateSwapOperations: ({
    offerAmount,
    operations
  }: {
    offerAmount: Uint128;
    operations: SwapOperation[];
  }) => Promise<SimulateSwapOperationsResponse>;
}
export class OraiswapMixedRouterQueryClient implements OraiswapMixedRouterReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.config = this.config.bind(this);
    this.simulateSwapOperations = this.simulateSwapOperations.bind(this);
  }

  config = async (): Promise<ConfigResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
  simulateSwapOperations = async ({
    offerAmount,
    operations
  }: {
    offerAmount: Uint128;
    operations: SwapOperation[];
  }): Promise<SimulateSwapOperationsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      simulate_swap_operations: {
        offer_amount: offerAmount,
        operations
      }
    });
  };
}
export interface OraiswapMixedRouterInterface extends OraiswapMixedRouterReadOnlyInterface {
  contractAddress: string;
  sender: string;
  receive: ({
    amount,
    msg,
    sender
  }: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  executeSwapOperations: ({
    minimumReceive,
    operations,
    to
  }: {
    minimumReceive?: Uint128;
    operations: SwapOperation[];
    to?: Addr;
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  executeSwapOperation: ({
    operation,
    sender,
    to
  }: {
    operation: SwapOperation;
    sender: Addr;
    to?: Addr;
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  assertMinimumReceiveAndTransfer: ({
    assetInfo,
    minimumReceive,
    receiver
  }: {
    assetInfo: AssetInfo;
    minimumReceive: Uint128;
    receiver: Addr;
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class OraiswapMixedRouterClient extends OraiswapMixedRouterQueryClient implements OraiswapMixedRouterInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.receive = this.receive.bind(this);
    this.executeSwapOperations = this.executeSwapOperations.bind(this);
    this.executeSwapOperation = this.executeSwapOperation.bind(this);
    this.assertMinimumReceiveAndTransfer = this.assertMinimumReceiveAndTransfer.bind(this);
  }

  receive = async ({
    amount,
    msg,
    sender
  }: {
    amount: Uint128;
    msg: Binary;
    sender: string;
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      receive: {
        amount,
        msg,
        sender
      }
    }, _fee, _memo, _funds);
  };
  executeSwapOperations = async ({
    minimumReceive,
    operations,
    to
  }: {
    minimumReceive?: Uint128;
    operations: SwapOperation[];
    to?: Addr;
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      execute_swap_operations: {
        minimum_receive: minimumReceive,
        operations,
        to
      }
    }, _fee, _memo, _funds);
  };
  executeSwapOperation = async ({
    operation,
    sender,
    to
  }: {
    operation: SwapOperation;
    sender: Addr;
    to?: Addr;
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      execute_swap_operation: {
        operation,
        sender,
        to
      }
    }, _fee, _memo, _funds);
  };
  assertMinimumReceiveAndTransfer = async ({
    assetInfo,
    minimumReceive,
    receiver
  }: {
    assetInfo: AssetInfo;
    minimumReceive: Uint128;
    receiver: Addr;
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      assert_minimum_receive_and_transfer: {
        asset_info: assetInfo,
        minimum_receive: minimumReceive,
        receiver
      }
    }, _fee, _memo, _funds);
  };
}