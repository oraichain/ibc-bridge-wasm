/**
* This file was automatically generated by @oraichain/ts-codegen@0.35.9.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @oraichain/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import {Uint128, Coin, IbcInfo, IbcFee} from "./types";
import {InstantiateMsg, ExecuteMsg, QueryMsg, String} from "./OraiIbcWasm.types";
export interface OraiIbcWasmReadOnlyInterface {
  contractAddress: string;
  inProgressRecoverAddress: ({
    channelId,
    sequenceId
  }: {
    channelId: string;
    sequenceId: number;
  }) => Promise<String>;
}
export class OraiIbcWasmQueryClient implements OraiIbcWasmReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.inProgressRecoverAddress = this.inProgressRecoverAddress.bind(this);
  }

  inProgressRecoverAddress = async ({
    channelId,
    sequenceId
  }: {
    channelId: string;
    sequenceId: number;
  }): Promise<String> => {
    return this.client.queryContractSmart(this.contractAddress, {
      in_progress_recover_address: {
        channel_id: channelId,
        sequence_id: sequenceId
      }
    });
  };
}
export interface OraiIbcWasmInterface extends OraiIbcWasmReadOnlyInterface {
  contractAddress: string;
  sender: string;
  ibcTransfer: ({
    coin,
    info,
    timeoutTimestamp
  }: {
    coin: Coin;
    info: IbcInfo;
    timeoutTimestamp: number;
  }, _fee?: number | StdFee | "auto", _memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class OraiIbcWasmClient extends OraiIbcWasmQueryClient implements OraiIbcWasmInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.ibcTransfer = this.ibcTransfer.bind(this);
  }

  ibcTransfer = async ({
    coin,
    info,
    timeoutTimestamp
  }: {
    coin: Coin;
    info: IbcInfo;
    timeoutTimestamp: number;
  }, _fee: number | StdFee | "auto" = "auto", _memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      ibc_transfer: {
        coin,
        info,
        timeout_timestamp: timeoutTimestamp
      }
    }, _fee, _memo, _funds);
  };
}